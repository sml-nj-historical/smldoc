(* smldoc.grm
 *
 * COPYRIGHT (c) 2014 The Fellowship of SML/NJ (http://www.smlnj.org)
 * All rights reserved.
 *)

%name SMLDoc;

%tokens
    : KW_abstype		("abstype")
    | KW_and			("and")
    | KW_andalso		("andalso")
    | KW_as			("as")
    | KW_case			("case")
    | KW_datatype		("datatype")
    | KW_do			("do")
    | KW_else			("else")
    | KW_end			("end")
    | KW_eqtype			("eqtype")
    | KW_exception		("exception")
    | KW_fn			("fn")
    | KW_fun			("fun")
    | KW_functor		("functor")
    | KW_handle			("handle")
    | KW_if			("if")
    | KW_in			("in")
    | KW_include		("include")
    | KW_infix			("infix")
    | KW_infixr			("infixr")
    | KW_let			("let")
    | KW_local			("local")
    | KW_nonfix			("nonfix")
    | KW_orelse			("orelse")
    | KW_of			("of")
    | KW_op			("op")
    | KW_open			("open")
    | KW_raise			("raise")
    | KW_rec			("rec")
    | KW_sharing		("sharing")
    | KW_sig			("sig")
    | KW_signature		("signature")
    | KW_struct			("struct")
    | KW_structure		("structure")
    | KW_then			("then")
    | KW_type			("type")
    | KW_val			("val")
    | KW_where			("where")
    | KW_while			("while")
    | KW_with			("with")
    | KW_withtype		("withtype")
  (* special symbolic IDs *)
    | ASTERISK			("*")
    | ASSIGN			(":=")
    | AMPERSAND			("&")
    | BANG			("!")
    | SLASH			("/")
  (* punctuation *)
    | ARROW			("->")
    | BAR			("|")
    | COLON			(":")
    | COLONGT			(":>")
    | COMMA			(",")
    | DOTDOTDOT			("...")
    | EQUALOP			("=")
    | DARROW			("=>")
    | HASH			("#")
    | LBRACE			("{")
    | LBRACKET			("[")
    | LPAREN			("(")
    | RBRACE 			("}")
    | RBRACKET			("]")
    | RPAREN			(")")
    | SEMICOLON			(";")
    | WILD			("_")
  (* literals *)
    | CHAR of string
    | INT of string
    | ID of Atom.atom
    | SYMID of Atom.atom
    | LONGID of Atom.atom
    | REAL of string
    | STRING of string
    | TYVAR of string
    | WORD of string
  (* MLton extensions *)
    | KW__build_const		("_build_const")
    | KW__command_line_const	("_command_line_const")
    | KW__const			("_const")
    | KW__address		("_address")
    | KW__export		("_export")
    | KW__import		("_import")
    | KW__overload		("_overload")
    | KW__symbol		("_symbol")
(* moved to pml.grm; will remove uses from ml.grm soon
    | KW__prim			("_prim")
*)
  (* documentation comments *)
    | BLANKLN
    | COMMENT of DCTokens.token list
    | AFTER_COMMENT of DCTokens.token list
    ;

%defs(
  structure A = ParseTree

  fun mergeDoc (NONE, d) = d
    | mergeDoc (d, NONE) = d
    | mergeDoc (SOME((p1, _), isPre, toks1), SOME((_, p2), _, toks2)) =
	SOME((p1, p2), isPre, toks1 @ toks2)

  fun optList NONE = []
    | optList (SOME l) = l

  fun mkFunTy (ty, []) = ty
    | mkFunTy (ty, ty' :: tys) = A.FUNty(ty, mkFunTy(ty', tys))

  fun mkTyApp ty [] = ty
    | mkTyApp ty (id::r) = mkTyApp (A.CONty([ty], id)) r
);

program
	: topdec' topdec*
		=> (A.FILE([], topdec' [] :: topdec))
	| doc opt_doc topdec' topdec*
		=> (A.FILE([doc], topdec' opt_doc :: topdec))
	;

topdec
	: opt_doc topdec'
		=> (topdec' opt_doc)
	;

topdec'
	: "signature" sigbinds
		=> (fn preDoc => A.SIGdec(sigbinds preDoc))
	;

(*---------------------------------------------------*)
(*                    Signatures                     *)
(*---------------------------------------------------*)

sigbinds
	: sigbind (opt_doc "and" sigbind => (sigbind opt_doc))*
		=> (fn preDoc => sigbind preDoc :: SR)
	;

sigbind
	: id "=" sigexp opt_after_doc
		=> (fn preDoc => let val (sigExp : A.sigexp, wSpecs) = sigexp
		      in
			(id, sigExp, wSpecs, preDoc @ opt_after_doc)
		      end)
	;

sigexp
	: id wherespecs
		=> (A.IDsigexp id, wherespecs)
	| "sig" specs "end" wherespecs
		=> (A.SIGsigexp specs, wherespecs)
	;

wherespecs
	: (* empty *)
		=> ([])
	| "where" wherespec andwherespecs
		=> (wherespec :: andwherespecs)
	;

andwherespecs
	: "and" wherespec andwherespecs
		=> (wherespec :: andwherespecs)
	| "where" wherespec andwherespecs
		=> (wherespec :: andwherespecs)
	;

wherespec
	: "type" tyvars longid "=" typ
		=> (A.WHEREty{params=tyvars, id=longid, def=typ})
(*
	| ID "=" longid (* SML/NJ where structure extension *)
	| LONGID "=" longid (* SML/NJ where structure extension *)
*)
	;

specs 
	: spec*
		=> (List.mapPartial (fn x => x) spec)
	;

spec
	: ";"
		=> (NONE)
	| opt_doc spec'
		=> (SOME(spec' opt_doc))
	;

spec'	: "include" id opt_after_doc (opt_doc id opt_after_doc => (id, opt_doc @ opt_after_doc))+
		=> (fn preDoc => A.INCLspec((id, preDoc @ opt_after_doc) :: SR))
	| "include" id wherespecs opt_after_doc
		=> (fn preDoc => A.INCLWHEREspec(id, wherespecs, preDoc @ opt_after_doc))
	| "structure" strdesc (opt_doc "and" strdesc)*
		=> (fn preDoc => raise Fail "unimplemented")
	| "sharing" "type" sharingeqns opt_after_doc
		=> (fn preDoc => A.SHARETYPEspec(sharingeqns, preDoc @ opt_after_doc))
	| "sharing" sharingeqns opt_after_doc
		=> (fn preDoc => A.SHAREspec(sharingeqns, preDoc @ opt_after_doc))
	| "type" tyvars id typerest
		=> (fn doc => A.TYspec{eq = false, specs = typerest(doc, tyvars, id)})
	| "eqtype" typdesc (opt_doc "and" typdesc => (typdesc opt_doc))*
		=> (fn preDoc => A.TYspec{eq = true, specs = typdesc preDoc :: SR})
	| "datatype" tyvars id datarest
		=> (fn preDoc => datarest (preDoc, tyvars, id))
	| "exception" condef (opt_doc "and" condef => (condef opt_doc))*
		=> (fn preDoc => A.EXNspec(condef preDoc :: SR))
	| "val" valdesc (opt_doc "and" valdesc => (valdesc opt_doc))*
		=> (fn preDoc => A.VALspec(valdesc preDoc :: SR))
	;

valdesc
	: id ":" typ opt_after_doc
		=> (fn preDoc => (id, typ, preDoc @ opt_after_doc))
	;

(* the rest of a "type" tyvars id ... *)
typerest
	: opt_after_doc (opt_doc "and" typdesc => (typdesc opt_doc))*
		=> (fn (preDoc, params, id) =>
		      {params = params, id = id, def = NONE, doc = preDoc @ opt_after_doc} :: SR)
	| "=" typ opt_after_doc
		=> (fn (preDoc, params, id) =>
		      [{params = params, id = id, def = SOME typ, doc = preDoc @ opt_after_doc}])
	;

typdesc
	: tyvars id opt_after_doc
		=> (fn preDoc => {params = tyvars, id = id, def = NONE, doc = preDoc @ opt_after_doc})
	;

(* the rest of a "datatype" tyvars id ... *)
datarest
	: opt_doc "=" condefs (opt_doc "and" datadef => (datadef opt_doc))*
		=> (fn (doc, params, id) =>
		      A.DTspec({params = params, id = id, cons = condefs opt_doc, doc = doc} :: SR))
	| "=" "datatype" longid opt_after_doc
		=> (fn (doc, _, id) =>
		      A.DTDEFspec{id = id, def = longid, doc = doc @ opt_after_doc})
	;

datadef
	: tyvars id opt_doc "=" condefs
		=> (fn doc => {params = tyvars, id = id, cons = condefs opt_doc, doc = doc})
	;

condefs
	: condef (opt_doc "|" condef => (condef opt_doc))*
		=> (fn preDoc => (condef preDoc :: SR))
	;

condef
	: id ("of" typ)? opt_after_doc
		=> (fn preDoc => A.CONspec(id, SR, preDoc @ opt_after_doc))
	;

strdesc
	: ID ":" sigexp
		=> ()
	;

sharingeqns
	: longid ("=" longid)+
		=> (longid :: SR)
	;

(*---------------------------------------------------*)
(*                       Types                       *)
(*---------------------------------------------------*)

(* QUESTION: should we have two versions of the type grammar. One with and one without
 * annotations?
 *)

typ
	: tupletyp ("->" tupletyp)*
		=> (mkFunTy (tupletyp, SR))
	;

tupletyp
	: typapp ("*" typapp)*
		=> (case SR
		     of [] => typapp
		      | tys => A.TUPLEty(typapp :: tys)
		    (* end case *))
	;

typapp
	: atyp longid*
		=> (atyp longid)
	;

atyp
	: TYVAR
		=> (mkTyApp (A.VARty TYVAR))
	| longid
		=> (mkTyApp (A.CONty([], longid)))
	| "{" (fieldtyp ("," fieldtyp)* => (fieldtyp :: SR))? "}"
		=> (mkTyApp (A.RECORDty(optList SR)))
	| "(" typ ("," typ)* ")"
		=> (fn ids => (case (typ::SR, ids)
		       of ([typ], []) => A.PARENty typ
			| (typs, id::r) => mkTyApp (A.CONty(typs, id)) r
			| (typs, []) => A.CONty(typs, Id.bogus)
		      (* end case *)))
	;

fieldtyp
	: label ":" typ opt_after_doc
		=> (label, typ, opt_after_doc)
	;

(*---------------------------------------------------*)
(*                    Identifiers                    *)
(*---------------------------------------------------*)

id
	: ID		=> (Id.new ID)
	| SYMID		=> (Id.new SYMID)
	;

tyvars
	: (* empty *)
		=> ([])
	| TYVAR
		=> ([TYVAR])
	| "(" TYVAR ("," TYVAR)* ")"
		=> (TYVAR :: SR)
	;

longid
	: ID		=> (Id.new ID)
	| SYMID		=> (Id.new SYMID)
	| LONGID	=> (Id.new LONGID)
	;

label
	: ID		=> (Id.new ID)
	| INT		=> (Id.new(Atom.atom INT))
	;

(*---------------------------------------------------*)
(*             Documantation comments                *)
(*---------------------------------------------------*)

opt_doc
	: (* empty *)	=> ([])
	| doc		=> ([doc])
	;

opt_after_doc
	: (* empty *)	=> ([])
	| after_doc	=> ([after_doc])
	;

doc	: COMMENT
		=> (FULL_SPAN, true, COMMENT)
	;

after_doc
	: AFTER_COMMENT
		=> (FULL_SPAN, false, AFTER_COMMENT)
	;
