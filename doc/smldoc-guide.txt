SMLDoc User's Guide
===================
:Author: John Reppy
:Date: November 16, 2014

//==============================================================================
== Introduction

*SMLDoc* is a tool for generating documentation from annotated SML source code.  It is
modeled after similar tools, such as
http://caml.inria.fr/pub/docs/manual-ocaml-400/manual029.html[*OCamldoc*],
http://doxygen.org[*Doxygen*], and.
https://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html[*Javadoc*].
It currently processes SML signatures, producing HTML output.

//==============================================================================
== Usage

TODO: command-line options

//==============================================================================
== Documentation comments

The standard form of an *smldoc* documentation comment is a normal SML comment written
with _exactly_ one extra asterisk at the beginning and is associated with the SML
specification or definition that immediately follows it.  There should be no blank line
between the comment and the declaration that it is documenting.  For example,

[source,sml]
------------
(** An expression tree represents simple integer expressions *)
datatype expr_tree
  (** a constant expression *)
  = EConst of int
  (** an addition operation *)
  | EAdd of expr_tree * expr_tree
  (** a multiplication operation *)
  | EMul of expr_tree * expr_tree
------------

Since it is sometimes desirable to putt comments after a definition, one can use
the _after comment_ form, which has the less-than character immediately following
the comment opening.  For example

[source,sml]
------------
(** An expression tree represents simple integer expressions *)
datatype expr_tree
  = EConst of int			(**< a constant expression *)
  | EAdd of expr_tree * expr_tree	(**< an addition operation *)
  | EMul of expr_tree * expr_tree	(**< a multiplication operation *)
------------

//==============================================================================
== Comment syntax

Documentation comments have an expected structure.

=== Text markup

The *smldoc* tool supports limited text markup in documentation comments.  The design
of this feature is taken from the ocamldoc tool.  The following grammar describes
the format of the markup language.  Literal text is in [blue]+blue monospaced+ font,
terminals and nont-terminals are in [maroon]_maroon italics_, and we
use [black]#braces# to denote a list of one or more elements.

[separator="&",grid="none",align="center",width="80%",cols=">2,^1,<4,8"]
|==============================================================================
& [maroon]_text_   & ::= & [black]#{# [maroon]_text-element_ [black]#}#  & a list of text elements

& [maroon]_text-element_
                   & ::= & & empty
&                  &  |  & [blue]+{b+ [maroon]_text_ [blue]+}+ & bold text
&                  &  |  & [blue]+{i+ [maroon]_text_ [blue]+}+ & italic text
&                  &  |  & [blue]+{e+ [maroon]_text_ [blue]+}+ & emphasize text
&                  &  |  & [blue]+{C+ [maroon]_text_ [blue]+}+ & center text
&                  &  |  & [blue]+{L+ [maroon]_text_ [blue]+}+ & left-justifuy text
&                  &  |  & [blue]+{R+ [maroon]_text_ [blue]+}+ & right-justify text
&                  &  |  & [blue]+{ul+ [black]#{# [maroon]_item_ [black]#}# [blue]+}+ & itemized list
&                  &  |  & [blue]+{ol+ [black]#{# [maroon]_item_ [black]#}# [blue]+}+ & enumerated list
&                  &  |  & [blue]+[+ [maroon]_string_ [blue]+]+ & SML code
&                  &  |  & [maroon]_esc-string_ & typeset the given escaped string
&                  &  |  & [maroon]_blank-line_ & force a newline

& [maroon]_item_   & ::= & [blue]+{-+ [maroon]_text_ +}+ & list item

& [maroon]_string_ & ::= & [black]#{# [maroon]_ascii-character_ [black]#}#
                         & a sequence of one or more printable or whitespace
			   ASCII characters. Unbalanced occurrances of the
			   special brackets ([blue]+{+, [blue]+}+, [blue]+[+,
			   or [blue]+]+) must be escaped
			   with a backslash ([blue]+\+), as must backslash
			   itself.

& [maroon]_esc-string_
                   & ::= & [black]#{# [maroon]_ascii-character_ [black]#}#
                         & a sequence of one or more printable or whitespace
			   ASCII characters. The special characters
			   ([blue]+{+, [blue]+}+, [blue]+[+, [blue]+]+,
			   [blue]+@+, and [blue]+\+) must be escaped
			   with a backslash ([blue]+\+).

& [maroon]_id_     & ::= & [black]#{# [maroon]_printable-character_ [black]#}#
                         & a sequence of non-space ASCII characters. Special
                           characters may appear without escape.

|==============================================================================

=== Tags

something about tags

[align="center",width="80%",cols="2,5"]
|==============================================================================
| [blue]+@author+ [maroon]_string_   |
The author of the documented element. Multiple author tags are allowed, but
there should only be one author per tag.

| [blue]+@deprecated+ [maroon]_text_ |
Mark an element as deprecated. The [maroon]_text_ should describe when the element was
deprecated, what to use as a replacement, and the reason for deprecation.

| [blue]+@param+ [maroon]_id_ [maroon]_text_ |
Associate the given description to the given parameter name [maroon]_id_. This tag
is used for functions and functors.

| [blue]+@raise+ [maroon]_id_ [maroon]_text_ |
Notes that the element, which should be a function, may raise the
exception [maroon]_id_.  The [maroon]_text_ should describe the circumstances in which the
exception is raised.  Multiple [blue]+@raise+ tags may be included for a given
element.

| [blue]+@return+ [maroon]_text_     |
Describes the return value of the element, which should be a function value.

| [blue]+@see+               |
| [blue]+@since+ [maroon]_string_    |
| [blue]+@source+            |
| [blue]+@before+            |
| [blue]+@version+ [maroon]_string_  |
Specifies the version number for the documented element.

| [blue]+@instance+ [maroon]_id_     |
Specifies that the structure [maroon]_id_ is an instance of the signature.

|==============================================================================

=== Prefixes

For multiline documentation comments, any prefix consisting of whitespace and one or more
asterisks is ignored.  Furthermore, leading whitespace (including that following the prefix)
is also ignored.  For example, the comment

[source,sml]
------------
(** This is a multiline comment
  * this is the second line with a prefix
    and this is the third, which does not use the prefix
  *)
------------

is processed like the following

[source,sml]
------------
(** This is a multiline comment
this is the second line with a prefix
and this is the third, which does not use the prefix
*)
------------

== Examples

[source,sml]
------------
(** The interface to an implementation of list sorting
 ** @author Johh Reppy
 ** @version 1.0
 ** @instance ListMergeSort
 ** @instance ListQuickSort
 *)
signature LIST_SORT =
  sig

  (** [sort gt lst] sorts the list [lst] in increasing order according to the {i greater-than}
   ** predicate [gt].
   ** @param gt tests if its first argument is greater than its second argument
   ** @param lst the list to be sorted
   ** @return the sorted list
   *)
    val sort : ('a * 'a -> bool) -> 'a list -> 'a list
 
  (** [uniqueSort cmp lst] sorts the list [lst] in increasing order according to the comparison
   ** function [cmp] while removing duplicate elements.
   ** @param cmp a comparison on the list element type
   ** @param lst the list to be sorted
   ** @return the sorted list with duplicates removed
   *)
    val uniqueSort : ('a * 'a -> order) -> 'a list -> 'a list

  (** [sorted gt lst] tests to see if the list [lst] is sorted in increasing order.
   ** @param gt tests if its first argument is greater than its second argument
   ** @param lst the list to be tested
   ** @return [true] if the list is sorted, [false] otherwise
   *)
    val sorted : ('a * 'a -> bool) -> 'a list -> bool

  end
------------

== Limitations

The current version of *smldoc* only supports processing SML signatures and only
generates HTML output.
